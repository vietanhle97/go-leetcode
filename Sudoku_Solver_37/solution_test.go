package Sudoku_Solver_37

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func Test_sudokuSolver(t *testing.T) {
	type args struct {
		sudoku [][]byte
	}
	tests := []struct {
		name string
		args args
		want [][]byte
	}{
		{
			name: "sudoku solver",
			args: args{
				sudoku: [][]byte{{'5', '3', '.', '.', '7', '.', '.', '.', '.'}, {'6', '.', '.', '1', '9', '5', '.', '.', '.'}, {'.', '9', '8', '.', '.', '.', '.', '6', '.'}, {'8', '.', '.', '.', '6', '.', '.', '.', '3'}, {'4', '.', '.', '8', '.', '3', '.', '.', '1'}, {'7', '.', '.', '.', '2', '.', '.', '.', '6'}, {'.', '6', '.', '.', '.', '.', '2', '8', '.'}, {'.', '.', '.', '4', '1', '9', '.', '.', '5'}, {'.', '.', '.', '.', '8', '.', '.', '7', '9'}},
			},
			want: [][]byte{{'5', '3', '4', '6', '7', '8', '9', '1', '2'}, {'6', '7', '2', '1', '9', '5', '3', '4', '8'}, {'1', '9', '8', '3', '4', '2', '5', '6', '7'}, {'8', '5', '9', '7', '6', '1', '4', '2', '3'}, {'4', '2', '6', '8', '5', '3', '7', '9', '1'}, {'7', '1', '3', '9', '2', '4', '8', '5', '6'}, {'9', '6', '1', '5', '3', '7', '2', '8', '4'}, {'2', '8', '7', '4', '1', '9', '6', '3', '5'}, {'3', '4', '5', '2', '8', '6', '1', '7', '9'}},
		},
		{
			name: "sudoku solver",
			args: args{
				sudoku: [][]byte{{'.', '2', '6', '5', '.', '.', '.', '9', '.'}, {'5', '.', '.', '.', '7', '9', '.', '.', '4'}, {'3', '.', '.', '.', '1', '.', '.', '.', '.'}, {'6', '.', '.', '.', '.', '.', '8', '.', '7'}, {'.', '7', '5', '.', '2', '.', '.', '1', '.'}, {'.', '1', '.', '.', '.', '.', '4', '.', '.'}, {'.', '.', '.', '3', '.', '8', '9', '.', '2'}, {'7', '.', '.', '.', '6', '.', '.', '4', '.'}, {'.', '3', '.', '2', '.', '.', '1', '.', '.'}},
			},
			want: [][]byte{{'4', '2', '6', '5', '8', '3', '7', '9', '1'}, {'5', '8', '1', '6', '7', '9', '2', '3', '4'}, {'3', '9', '7', '4', '1', '2', '5', '8', '6'}, {'6', '4', '3', '1', '9', '5', '8', '2', '7'}, {'9', '7', '5', '8', '2', '4', '6', '1', '3'}, {'2', '1', '8', '7', '3', '6', '4', '5', '9'}, {'1', '6', '4', '3', '5', '8', '9', '7', '2'}, {'7', '5', '2', '9', '6', '1', '3', '4', '8'}, {'8', '3', '9', '2', '4', '7', '1', '6', '5'}},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			solveSudoku(tt.args.sudoku)
			assert.Equal(t, tt.want, tt.args.sudoku)
		})
	}
}
